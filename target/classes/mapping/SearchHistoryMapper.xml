<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="common.mapper.SearchHistoryMapper" >
  <resultMap id="BaseResultMap" type="common.model.SearchHistory" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="book_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="search_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="num" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, book_id, search_time, num
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from search_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from search_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="common.model.SearchHistory" >
    insert into search_history (id, user_id, book_id, 
      search_time, num)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{bookId,jdbcType=VARCHAR}, 
      #{searchTime,jdbcType=INTEGER}, #{num,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="common.model.SearchHistory" >
    insert into search_history
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="bookId != null" >
        book_id,
      </if>
      <if test="searchTime != null" >
        search_time,
      </if>
      <if test="num != null" >
        num,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="bookId != null" >
        #{bookId,jdbcType=VARCHAR},
      </if>
      <if test="searchTime != null" >
        #{searchTime,jdbcType=INTEGER},
      </if>
      <if test="num != null" >
        #{num,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="common.model.SearchHistory" >
    update search_history
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="bookId != null" >
        book_id = #{bookId,jdbcType=VARCHAR},
      </if>
      <if test="searchTime != null" >
        search_time = #{searchTime,jdbcType=INTEGER},
      </if>
      <if test="num != null" >
        num = #{num,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="common.model.SearchHistory" >
    update search_history
    set user_id = #{userId,jdbcType=INTEGER},
      book_id = #{bookId,jdbcType=VARCHAR},
      search_time = #{searchTime,jdbcType=INTEGER},
      num = #{num,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getSearchHistoryList" resultMap="BaseResultMap" parameterType="common.model.SearchHistory" >
    select *
    from search_history
    where  1=1
   <if test="userId != null">AND user_id= #{userId} </if>
    <if test="bookId != null">  AND book_id= #{bookId} </if>
     ORDER BY search_time desc,num desc
    limit 100
  </select>
</mapper>