<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="common.mapper.BookMapper" >
  <resultMap id="BaseResultMap" type="common.model.Book" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="ISBN" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="book_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="author" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="press" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="press_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="page_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="src" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="pricing" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="pricingunit" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="seller_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="book_type2" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="book_type1" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="book_type_name2" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="book_type_name1" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="professional_type1" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="professional_type2" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="professional_type_name1" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="professional_type_name2" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="userable_num" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="use_num" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="pre_num" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="c_u" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="print_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="c_t" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="print_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="import_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="import_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="export_user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="export_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="sell_status" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="borrow_status" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="gift_status" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="auction_status" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="binding" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="subtitle" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="isbn10" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="translator" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="tag" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="src2" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="src3" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="introduce" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
      <arg column="author_intro" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
      <arg column="catalog" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, ISBN, book_name, author, press, press_time, page_number, src, pricing, pricingunit, 
    seller_number, book_type2, book_type1, book_type_name2, book_type_name1, professional_type1, 
    professional_type2, professional_type_name1, professional_type_name2, userable_num, 
    use_num, pre_num, c_u, print_user, c_t, print_time, import_user, import_time, export_user, 
    export_time, sell_status, borrow_status, gift_status, auction_status, binding, subtitle, 
    isbn10, translator, tag, src2, src3,introduce, author_intro, catalog
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from book
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from book
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="common.query.BookQuery" useGeneratedKeys="true" keyProperty="id"  >
    insert into book (id, ISBN, book_name, 
      author, press, press_time, 
      page_number, src, pricing, 
      pricingunit, seller_number, book_type2, 
      book_type1, book_type_name2, book_type_name1, 
      professional_type1, professional_type2, professional_type_name1, 
      professional_type_name2, userable_num, use_num, 
      pre_num, c_u, print_user, 
      c_t, print_time, import_user, 
      import_time, export_user, export_time, 
      sell_status, borrow_status, gift_status, 
      auction_status, binding, subtitle, 
      isbn10, translator, tag, 
      src2, src3, introduce, 
      author_intro, catalog)
    values (#{id,jdbcType=INTEGER}, #{isbn}, #{bookName,jdbcType=VARCHAR},
      #{author,jdbcType=VARCHAR}, #{press,jdbcType=VARCHAR}, #{pressTime,jdbcType=INTEGER}, 
      #{pageNum,jdbcType=INTEGER}, #{src,jdbcType=VARCHAR}, #{pricing,jdbcType=DECIMAL},
      #{pricingunit,jdbcType=VARCHAR}, #{sellerNumber,jdbcType=INTEGER}, #{bookType2,jdbcType=INTEGER}, 
      #{bookType1,jdbcType=INTEGER}, #{bookTypeName2,jdbcType=VARCHAR}, #{bookTypeName1,jdbcType=VARCHAR}, 
      #{professionalType1,jdbcType=INTEGER}, #{professionalType2,jdbcType=INTEGER}, #{professionalTypeName1,jdbcType=VARCHAR}, 
      #{professionalTypeName2,jdbcType=VARCHAR}, #{userableNum,jdbcType=INTEGER}, #{useNum,jdbcType=INTEGER}, 
      #{preNum,jdbcType=INTEGER}, #{cU,jdbcType=INTEGER}, #{printUser,jdbcType=INTEGER}, 
      #{cT,jdbcType=INTEGER}, #{printTime,jdbcType=INTEGER}, #{importUser,jdbcType=INTEGER}, 
      #{importTime,jdbcType=INTEGER}, #{exportUser,jdbcType=INTEGER}, #{exportTime,jdbcType=INTEGER}, 
      #{sellStatus,jdbcType=INTEGER}, #{borrowStatus,jdbcType=INTEGER}, #{giftStatus,jdbcType=INTEGER}, 
      #{auctionStatus,jdbcType=INTEGER}, #{binding,jdbcType=VARCHAR}, #{subtitle,jdbcType=VARCHAR}, 
      #{isbn10,jdbcType=INTEGER}, #{translator,jdbcType=VARCHAR}, #{tag,jdbcType=VARCHAR}, 
      #{src2,jdbcType=VARCHAR}, #{src3,jdbcType=VARCHAR}, #{introduce,jdbcType=LONGVARCHAR}, 
      #{authorIntro,jdbcType=LONGVARCHAR}, #{catalog,jdbcType=LONGVARCHAR})
  </insert>
  <select id="queryBookList" resultMap="BaseResultMap" parameterType="common.query.BookQuery" >
    SELECT *
    FROM book
    WHERE 1=1
    <if test="preNum != null" >   AND userable_num>0 </if>
    <if test="professionalType1 != null" >   AND  professional_type1 = #{professionalType1,jdbcType=INTEGER}   </if>
    <if test="professionalType2 != null" >   AND  professional_type2 = #{professionalType2,jdbcType=INTEGER}   </if>
    <if test="isbn != null" >   AND  ISBN = #{isbn} </if>
    <if test="press != null and press !=''">  <![CDATA[	AND press LIKE CONCAT(CONCAT('%',#{press}),'%')	]]> </if>
    <if test="bookName != null and bookName !=''">  <![CDATA[	AND book_name LIKE CONCAT(CONCAT('%',#{bookName}),'%')	]]> </if>
    <if test="author != null and author !=''">  <![CDATA[	AND author LIKE CONCAT(CONCAT('%',#{author}),'%')	]]> </if>
    <if test="professionalTypeName1 != null and professionalTypeName1 !=''">  <![CDATA[	AND professional_type_name1 LIKE CONCAT(CONCAT('%',#{professionalTypeName1}),'%')	]]> </if>
    <if test="professionalTypeName2 != null and professionalTypeName2 !=''">  <![CDATA[	AND professional_type_name2 LIKE CONCAT(CONCAT('%',#{professionalTypeName2}),'%')	]]> </if>
    <if test="bookTypeName1 != null and bookTypeName1 !=''">  <![CDATA[	AND book_type_name1 LIKE CONCAT(CONCAT('%',#{bookTypeName1}),'%')	]]> </if>
    <if test="bookTypeName2 != null and bookTypeName2 !=''">  <![CDATA[	AND book_type_name2 LIKE CONCAT(CONCAT('%',#{bookTypeName2}),'%')	]]> </if>
    <if test="sellStatus != null" >   AND  sell_status = #{sellStatus} </if>
    <if test="borrowStatus != null" >   AND  borrow_status = #{borrowStatus} </if>
    <if test="giftStatus != null" >   AND  gift_status = #{giftStatus} </if>
    <if test="auctionStatus != null" >   AND  auction_status = #{auctionStatus} </if>
    <if test="sortName != null  ">        ORDER BY ${sortName} ${sortOrder} </if>
    <if test="pageNumber &gt;0 ">         limit #{startRecord} , #{pageSize} </if>
  </select>
  <select id="queryBookListTopTen" resultMap="BaseResultMap" parameterType="common.query.BookQuery" >
    SELECT *
    FROM book
    WHERE userable_num>0
    <if test="professionalType1 != null" >   AND  professional_type1 = #{professionalType1,jdbcType=INTEGER}   </if>
    <if test="professionalType2 != null" >   AND  professional_type2 = #{professionalType2,jdbcType=INTEGER}   </if>
    <if test="press != null and press !=''">  <![CDATA[	AND press LIKE CONCAT(CONCAT('%',#{press}),'%')	]]> </if>
    <if test="bookName != null and bookName !=''">  <![CDATA[	AND book_name LIKE CONCAT(CONCAT('%',#{bookName}),'%')	]]> </if>
    <if test="author != null and author !=''">  <![CDATA[	AND author LIKE CONCAT(CONCAT('%',#{author}),'%')	]]> </if>
    <if test="professionalTypeName1 != null and professionalTypeName1 !=''">  <![CDATA[	AND professional_type_name1 LIKE CONCAT(CONCAT('%',#{professionalTypeName1}),'%')	]]> </if>
    <if test="professionalTypeName2 != null and professionalTypeName2 !=''">  <![CDATA[	AND professional_type_name2 LIKE CONCAT(CONCAT('%',#{professionalTypeName2}),'%')	]]> </if>
    <if test="bookTypeName1 != null and bookTypeName1 !=''">  <![CDATA[	AND book_type_name1 LIKE CONCAT(CONCAT('%',#{bookTypeName1}),'%')	]]> </if>
    <if test="bookTypeName2 != null and bookTypeName2 !=''">  <![CDATA[	AND book_type_name2 LIKE CONCAT(CONCAT('%',#{bookTypeName2}),'%')	]]> </if>
    <if test="sellStatus != null" >   AND  sell_status = #{sellStatus} </if>
    <if test="borrowStatus != null" >   AND  borrow_status = #{borrowStatus} </if>
    <if test="giftStatus != null" >   AND  gift_status = #{giftStatus} </if>
    <if test="auctionStatus != null" >   AND  auction_status = #{auctionStatus} </if>

    <if test="sortName != null  ">        ORDER BY ${sortName} ${sortOrder} </if>
    <if test="pageSize &gt;0 "> limit #{pageSize}</if>

  </select>
  <select id="queryBookCount" resultType="java.lang.Integer" parameterType="common.query.BookQuery" >
    SELECT count(*)
    FROM book
    WHERE 1=1
    <if test="professionalType1 != null" >   AND  professional_type1 = #{professionalType1,jdbcType=INTEGER}   </if>
    <if test="professionalType2 != null" >   AND  professional_type2 = #{professionalType2,jdbcType=INTEGER}   </if>
    <if test="isbn != null" >   AND  ISBN = #{isbn} </if>
    <if test="press != null and press !=''">  <![CDATA[	AND press LIKE CONCAT(CONCAT('%',#{press}),'%')	]]> </if>
    <if test="bookName != null and bookName !=''">  <![CDATA[	AND book_name LIKE CONCAT(CONCAT('%',#{bookName}),'%')	]]> </if>
    <if test="author != null and author !=''">  <![CDATA[	AND author LIKE CONCAT(CONCAT('%',#{author}),'%')	]]> </if>
    <if test="professionalTypeName1 != null and professionalTypeName1 !=''">  <![CDATA[	AND professional_type_name1 LIKE CONCAT(CONCAT('%',#{professionalTypeName1}),'%')	]]> </if>
    <if test="professionalTypeName2 != null and professionalTypeName2 !=''">  <![CDATA[	AND professional_type_name2 LIKE CONCAT(CONCAT('%',#{professionalTypeName2}),'%')	]]> </if>
    <if test="sellStatus != null" >   AND  sell_status = #{sellStatus} </if>
    <if test="borrowStatus != null" >   AND  borrow_status = #{borrowStatus} </if>
    <if test="giftStatus != null" >   AND  gift_status = #{giftStatus} </if>
    <if test="auctionStatus != null" >   AND  auction_status = #{auctionStatus} </if>

  </select>
  <select id="queryBookByBookId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    SELECT *
    FROM book
    WHERE id=#{id}
  </select>
  <select id="queryBookListByBookIds" resultMap="BaseResultMap" parameterType="java.lang.Integer"  >
    SELECT *
    FROM book
    WHERE id in
    <foreach collection="ids" item="item" index="index" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </select>
  <select id="queryBookByBookISBN" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    SELECT *
    FROM book
    WHERE ISBN=#{isbn}
  </select>
  <select id="queryBookListByISBNs" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    SELECT *
    FROM book
    WHERE  ISBN in
    <foreach collection="isbns" item="item" index="index" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </select>
  <update id="upateBookUserNumRed">
    UPDATE book SET userable_num=userable_num-#{preNum},use_num=use_num+#{preNum}
    where id=#{id}
  </update>
  <update id="upateBookUserNumAdd">
    UPDATE book
    <set>
        <if test="preNum != null" >userable_num=userable_num+#{preNum},</if>
        <if test="sellerNumber != null" >seller_number = #{sellerNumber}, </if>
        <if test="professionalTypeName1 != null and professionalTypeName1 !=''">professional_type_name1=#{professionalTypeName1},</if>
        <if test="professionalTypeName2 != null and professionalTypeName2 !=''">professional_type_name2=#{professionalTypeName2},</if>
    </set>
    where id=#{id}

  </update>
</mapper>
