<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="common.mapper.UserManagerMapper" >
  <resultMap id="BaseResultMap" type="common.model.UserManager" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="username" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="password" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="sign_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="login_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="login_num" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="role_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="work_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="delete_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="phone_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, password, sign_time, login_time, login_num, role_id, work_id, delete_time, 
    phone_number
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user_manager
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_manager
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="common.model.UserManager" >
    insert into user_manager (id, username, password, 
      sign_time, login_time, login_num, 
      role_id, work_id, delete_time, 
      phone_number)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=INTEGER}, 
      #{signTime,jdbcType=INTEGER}, #{loginTime,jdbcType=INTEGER}, #{loginNum,jdbcType=INTEGER}, 
      #{roleId,jdbcType=INTEGER}, #{workId,jdbcType=INTEGER}, #{deleteTime,jdbcType=INTEGER}, 
      #{phoneNumber,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="common.model.UserManager" >
    insert into user_manager
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="signTime != null" >
        sign_time,
      </if>
      <if test="loginTime != null" >
        login_time,
      </if>
      <if test="loginNum != null" >
        login_num,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="workId != null" >
        work_id,
      </if>
      <if test="deleteTime != null" >
        delete_time,
      </if>
      <if test="phoneNumber != null" >
        phone_number,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=INTEGER},
      </if>
      <if test="signTime != null" >
        #{signTime,jdbcType=INTEGER},
      </if>
      <if test="loginTime != null" >
        #{loginTime,jdbcType=INTEGER},
      </if>
      <if test="loginNum != null" >
        #{loginNum,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="workId != null" >
        #{workId,jdbcType=INTEGER},
      </if>
      <if test="deleteTime != null" >
        #{deleteTime,jdbcType=INTEGER},
      </if>
      <if test="phoneNumber != null" >
        #{phoneNumber,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="common.model.UserManager" >
    update user_manager
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=INTEGER},
      </if>
      <if test="signTime != null" >
        sign_time = #{signTime,jdbcType=INTEGER},
      </if>
      <if test="loginTime != null" >
        login_time = #{loginTime,jdbcType=INTEGER},
      </if>
      <if test="loginNum != null" >
        login_num = #{loginNum,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="workId != null" >
        work_id = #{workId,jdbcType=INTEGER},
      </if>
      <if test="deleteTime != null" >
        delete_time = #{deleteTime,jdbcType=INTEGER},
      </if>
      <if test="phoneNumber != null" >
        phone_number = #{phoneNumber,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="common.model.UserManager" >
    update user_manager
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=INTEGER},
      sign_time = #{signTime,jdbcType=INTEGER},
      login_time = #{loginTime,jdbcType=INTEGER},
      login_num = #{loginNum,jdbcType=INTEGER},
      role_id = #{roleId,jdbcType=INTEGER},
      work_id = #{workId,jdbcType=INTEGER},
      delete_time = #{deleteTime,jdbcType=INTEGER},
      phone_number = #{phoneNumber,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getUserNameById" parameterType="java.lang.Integer" resultType="java.lang.String" >
    SELECT  username
    FROM user_manager
    WHERE id=#{id}
  </select>
  <select id="queryUserShareManager" resultMap="BaseResultMap" parameterType="common.query.UserManagerQuery" >
    SELECT *
    FROM user_manager
    WHERE 1=1
    <if test="phoneNumber != null" >
      AND  phone_number = #{phoneNumber,jdbcType=BIGINT}
    </if>
    <if test="sSignDate != null and sSignDate>0">    AND sign_time >= #{sSignDate}        </if>
    <if test="eSignDate != null and sSignDate>0 ">   <![CDATA[ AND sign_time <= #{eSignDate} ]]> </if>
    <if test="workId != null" >
      AND  work_id = #{workId}
    </if>
    <if test="roleId != null" >
      AND  role_id = #{roleId}
    </if>
    <if test="username != null and username !=''">  <![CDATA[	AND username LIKE CONCAT(CONCAT('%',#{username}),'%')	]]> </if>
    <if test="sortName != null  ">        ORDER BY ${sortName} ${sortOrder} </if>
    <if test="pageNumber &gt;0 ">         limit #{startRecord} , #{pageSize} </if>

  </select>
  <select id="queryUserShareManagerById" resultMap="BaseResultMap" parameterType="java.lang.Integer"  >
    SELECT *
    FROM user_manager
    WHERE id=#{id}
  </select>
  <select id="queryUserShareManagerLists" resultMap="BaseResultMap" parameterType="common.query.UserManagerQuery"  >
    SELECT *
    FROM user_manager
    WHERE 1=1
    <if test="phoneNumber != null" >
      AND  phone_number = #{phoneNumber,jdbcType=BIGINT}
    </if>
    <if test="sSignDate != null and sSignDate>0">    AND sign_time >= #{sSignDate}        </if>
    <if test="eSignDate != null and sSignDate>0 ">   <![CDATA[ AND sign_time <= #{eSignDate} ]]> </if>
    <if test="workId != null" >
      AND  work_id = #{workId}
    </if>
    <if test="roleId != null" >
      AND  role_id = #{roleId}
    </if>
    <if test="username != null and username !=''">  <![CDATA[	AND username LIKE CONCAT(CONCAT('%',#{username}),'%')	]]> </if>
    <if test="sortName != null  ">        ORDER BY ${sortName} ${sortOrder} </if>
    <if test="pageNumber &gt;0 ">         limit #{startRecord} , #{pageSize} </if>

  </select>
  <select id="queryCountUserShareManager" resultType="java.lang.Integer" parameterType="common.query.UserManagerQuery" >
    SELECT count(*)
    FROM user_manager
    WHERE 1=1
    <if test="phoneNumber != null" >
      AND  phone_number = #{phoneNumber,jdbcType=BIGINT}
    </if>
    <if test="sSignDate != null and sSignDate>0">    AND sign_time >= #{sSignDate}        </if>
    <if test="eSignDate != null and sSignDate>0 ">   <![CDATA[ AND sign_time <= #{eSignDate} ]]> </if>
    <if test="workId != null" >
      AND  work_id = #{workId}
    </if>
    <if test="roleId != null" >
      AND  role_id = #{roleId}
    </if>
    <if test="username != null and username !=''">  <![CDATA[	AND username LIKE CONCAT(CONCAT('%',#{username}),'%')	]]> </if>
    <if test="sortName != null  ">        ORDER BY ${sortName} ${sortOrder} </if>
    <if test="pageNumber &gt;0 ">         limit #{startRecord} , #{pageSize} </if>
  </select>
  <update id="updateRole" parameterType="common.model.UserManager" >
    update user_manager
    set  role_id = #{roleId}
    where id = #{id}
  </update>
</mapper>